// Copyright lowRISC contributors.
// Licensed under the Apache License, Version 2.0, see LICENSE for details.
// SPDX-License-Identifier: Apache-2.0
//
// Register Package auto-generated by `reggen` containing data structure

package vco_decoder_reg_pkg;

  // Address widths within the block
  parameter int BlockAw = 6;

  ////////////////////////////
  // Typedefs for registers //
  ////////////////////////////

  typedef struct packed {logic [31:0] q;} vco_decoder_reg2hw_refresh_cycles_reg_t;

  typedef struct packed {logic [31:0] q;} vco_decoder_reg2hw_counter_limit_reg_t;

  typedef struct packed {logic q;} vco_decoder_reg2hw_manual_trigger_reg_t;

  typedef struct packed {
    struct packed {logic q;} p_enable;
    struct packed {logic q;} n_enable;
  } vco_decoder_reg2hw_enable_reg_t;

  typedef struct packed {logic q;} vco_decoder_reg2hw_manual_refresh_train0_reg_t;

  typedef struct packed {logic q;} vco_decoder_reg2hw_manual_refresh_train1_reg_t;

  typedef struct packed {logic q;} vco_decoder_reg2hw_manual_refresh_train2_reg_t;

  typedef struct packed {
    logic [30:0] d;
    logic        de;
  } vco_decoder_hw2reg_adc_p_fine_out_reg_t;

  typedef struct packed {
    logic [30:0] d;
    logic        de;
  } vco_decoder_hw2reg_adc_n_fine_out_reg_t;

  typedef struct packed {
    logic [25:0] d;
    logic        de;
  } vco_decoder_hw2reg_adc_p_coarse_out_reg_t;

  typedef struct packed {
    logic [25:0] d;
    logic        de;
  } vco_decoder_hw2reg_adc_n_coarse_out_reg_t;

  typedef struct packed {
    logic [31:0] d;
    logic        de;
  } vco_decoder_hw2reg_vco_decoder_cnt_reg_t;

  // Register -> HW type
  typedef struct packed {
    vco_decoder_reg2hw_refresh_cycles_reg_t refresh_cycles;  // [69:38]
    vco_decoder_reg2hw_counter_limit_reg_t counter_limit;  // [37:6]
    vco_decoder_reg2hw_manual_trigger_reg_t manual_trigger;  // [5:5]
    vco_decoder_reg2hw_enable_reg_t enable;  // [4:3]
    vco_decoder_reg2hw_manual_refresh_train0_reg_t manual_refresh_train0;  // [2:2]
    vco_decoder_reg2hw_manual_refresh_train1_reg_t manual_refresh_train1;  // [1:1]
    vco_decoder_reg2hw_manual_refresh_train2_reg_t manual_refresh_train2;  // [0:0]
  } vco_decoder_reg2hw_t;

  // HW -> register type
  typedef struct packed {
    vco_decoder_hw2reg_adc_p_fine_out_reg_t   adc_p_fine_out;    // [150:119]
    vco_decoder_hw2reg_adc_n_fine_out_reg_t   adc_n_fine_out;    // [118:87]
    vco_decoder_hw2reg_adc_p_coarse_out_reg_t adc_p_coarse_out;  // [86:60]
    vco_decoder_hw2reg_adc_n_coarse_out_reg_t adc_n_coarse_out;  // [59:33]
    vco_decoder_hw2reg_vco_decoder_cnt_reg_t  vco_decoder_cnt;   // [32:0]
  } vco_decoder_hw2reg_t;

  // Register offsets
  parameter logic [BlockAw-1:0] VCO_DECODER_REFRESH_CYCLES_OFFSET = 6'h0;
  parameter logic [BlockAw-1:0] VCO_DECODER_COUNTER_LIMIT_OFFSET = 6'h4;
  parameter logic [BlockAw-1:0] VCO_DECODER_MANUAL_TRIGGER_OFFSET = 6'h8;
  parameter logic [BlockAw-1:0] VCO_DECODER_ENABLE_OFFSET = 6'hc;
  parameter logic [BlockAw-1:0] VCO_DECODER_ADC_P_FINE_OUT_OFFSET = 6'h10;
  parameter logic [BlockAw-1:0] VCO_DECODER_ADC_N_FINE_OUT_OFFSET = 6'h14;
  parameter logic [BlockAw-1:0] VCO_DECODER_ADC_P_COARSE_OUT_OFFSET = 6'h18;
  parameter logic [BlockAw-1:0] VCO_DECODER_ADC_N_COARSE_OUT_OFFSET = 6'h1c;
  parameter logic [BlockAw-1:0] VCO_DECODER_VCO_DECODER_CNT_OFFSET = 6'h20;
  parameter logic [BlockAw-1:0] VCO_DECODER_MANUAL_REFRESH_TRAIN0_OFFSET = 6'h24;
  parameter logic [BlockAw-1:0] VCO_DECODER_MANUAL_REFRESH_TRAIN1_OFFSET = 6'h28;
  parameter logic [BlockAw-1:0] VCO_DECODER_MANUAL_REFRESH_TRAIN2_OFFSET = 6'h2c;

  // Register index
  typedef enum int {
    VCO_DECODER_REFRESH_CYCLES,
    VCO_DECODER_COUNTER_LIMIT,
    VCO_DECODER_MANUAL_TRIGGER,
    VCO_DECODER_ENABLE,
    VCO_DECODER_ADC_P_FINE_OUT,
    VCO_DECODER_ADC_N_FINE_OUT,
    VCO_DECODER_ADC_P_COARSE_OUT,
    VCO_DECODER_ADC_N_COARSE_OUT,
    VCO_DECODER_VCO_DECODER_CNT,
    VCO_DECODER_MANUAL_REFRESH_TRAIN0,
    VCO_DECODER_MANUAL_REFRESH_TRAIN1,
    VCO_DECODER_MANUAL_REFRESH_TRAIN2
  } vco_decoder_id_e;

  // Register width information to check illegal writes
  parameter logic [3:0] VCO_DECODER_PERMIT[12] = '{
      4'b1111,  // index[ 0] VCO_DECODER_REFRESH_CYCLES
      4'b1111,  // index[ 1] VCO_DECODER_COUNTER_LIMIT
      4'b0001,  // index[ 2] VCO_DECODER_MANUAL_TRIGGER
      4'b0001,  // index[ 3] VCO_DECODER_ENABLE
      4'b1111,  // index[ 4] VCO_DECODER_ADC_P_FINE_OUT
      4'b1111,  // index[ 5] VCO_DECODER_ADC_N_FINE_OUT
      4'b1111,  // index[ 6] VCO_DECODER_ADC_P_COARSE_OUT
      4'b1111,  // index[ 7] VCO_DECODER_ADC_N_COARSE_OUT
      4'b1111,  // index[ 8] VCO_DECODER_VCO_DECODER_CNT
      4'b0001,  // index[ 9] VCO_DECODER_MANUAL_REFRESH_TRAIN0
      4'b0001,  // index[10] VCO_DECODER_MANUAL_REFRESH_TRAIN1
      4'b0001  // index[11] VCO_DECODER_MANUAL_REFRESH_TRAIN2
  };

endpackage

