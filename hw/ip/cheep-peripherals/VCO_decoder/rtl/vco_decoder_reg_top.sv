// Copyright lowRISC contributors.
// Licensed under the Apache License, Version 2.0, see LICENSE for details.
// SPDX-License-Identifier: Apache-2.0
//
// Register Top module auto-generated by `reggen`


`include "common_cells/assertions.svh"

module vco_decoder_reg_top #(
    parameter type reg_req_t = logic,
    parameter type reg_rsp_t = logic,
    parameter int AW = 6
) (
    input logic clk_i,
    input logic rst_ni,
    input reg_req_t reg_req_i,
    output reg_rsp_t reg_rsp_o,
    // To HW
    output vco_decoder_reg_pkg::vco_decoder_reg2hw_t reg2hw,  // Write
    input vco_decoder_reg_pkg::vco_decoder_hw2reg_t hw2reg,  // Read


    // Config
    input devmode_i  // If 1, explicit error return for unmapped register access
);

  import vco_decoder_reg_pkg::*;

  localparam int DW = 32;
  localparam int DBW = DW / 8;  // Byte Width

  // register signals
  logic           reg_we;
  logic           reg_re;
  logic [ AW-1:0] reg_addr;
  logic [ DW-1:0] reg_wdata;
  logic [DBW-1:0] reg_be;
  logic [ DW-1:0] reg_rdata;
  logic           reg_error;

  logic addrmiss, wr_err;

  logic [DW-1:0] reg_rdata_next;

  // Below register interface can be changed
  reg_req_t reg_intf_req;
  reg_rsp_t reg_intf_rsp;


  assign reg_intf_req = reg_req_i;
  assign reg_rsp_o = reg_intf_rsp;


  assign reg_we = reg_intf_req.valid & reg_intf_req.write;
  assign reg_re = reg_intf_req.valid & ~reg_intf_req.write;
  assign reg_addr = reg_intf_req.addr;
  assign reg_wdata = reg_intf_req.wdata;
  assign reg_be = reg_intf_req.wstrb;
  assign reg_intf_rsp.rdata = reg_rdata;
  assign reg_intf_rsp.error = reg_error;
  assign reg_intf_rsp.ready = 1'b1;

  assign reg_rdata = reg_rdata_next;
  assign reg_error = (devmode_i & addrmiss) | wr_err;


  // Define SW related signals
  // Format: <reg>_<field>_{wd|we|qs}
  //        or <reg>_{wd|we|qs} if field == 1 or 0
  logic [31:0] refresh_cycles_qs;
  logic [31:0] refresh_cycles_wd;
  logic refresh_cycles_we;
  logic [31:0] counter_limit_qs;
  logic [31:0] counter_limit_wd;
  logic counter_limit_we;
  logic manual_trigger_qs;
  logic manual_trigger_wd;
  logic manual_trigger_we;
  logic enable_p_enable_qs;
  logic enable_p_enable_wd;
  logic enable_p_enable_we;
  logic enable_n_enable_qs;
  logic enable_n_enable_wd;
  logic enable_n_enable_we;
  logic [30:0] adc_p_fine_out_qs;
  logic [30:0] adc_p_fine_out_wd;
  logic adc_p_fine_out_we;
  logic [30:0] adc_n_fine_out_qs;
  logic [30:0] adc_n_fine_out_wd;
  logic adc_n_fine_out_we;
  logic [25:0] adc_p_coarse_out_qs;
  logic [25:0] adc_p_coarse_out_wd;
  logic adc_p_coarse_out_we;
  logic [25:0] adc_n_coarse_out_qs;
  logic [25:0] adc_n_coarse_out_wd;
  logic adc_n_coarse_out_we;
  logic [31:0] vco_decoder_cnt_qs;
  logic [31:0] vco_decoder_cnt_wd;
  logic vco_decoder_cnt_we;
  logic manual_refresh_train0_qs;
  logic manual_refresh_train0_wd;
  logic manual_refresh_train0_we;
  logic manual_refresh_train1_qs;
  logic manual_refresh_train1_wd;
  logic manual_refresh_train1_we;
  logic manual_refresh_train2_qs;
  logic manual_refresh_train2_wd;
  logic manual_refresh_train2_we;

  // Register instances
  // R[refresh_cycles]: V(False)

  prim_subreg #(
      .DW      (32),
      .SWACCESS("RW"),
      .RESVAL  (32'h0)
  ) u_refresh_cycles (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(refresh_cycles_we),
      .wd(refresh_cycles_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.refresh_cycles.q),

      // to register interface (read)
      .qs(refresh_cycles_qs)
  );


  // R[counter_limit]: V(False)

  prim_subreg #(
      .DW      (32),
      .SWACCESS("RW"),
      .RESVAL  (32'h0)
  ) u_counter_limit (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(counter_limit_we),
      .wd(counter_limit_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.counter_limit.q),

      // to register interface (read)
      .qs(counter_limit_qs)
  );


  // R[manual_trigger]: V(False)

  prim_subreg #(
      .DW      (1),
      .SWACCESS("RW"),
      .RESVAL  (1'h0)
  ) u_manual_trigger (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(manual_trigger_we),
      .wd(manual_trigger_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.manual_trigger.q),

      // to register interface (read)
      .qs(manual_trigger_qs)
  );


  // R[enable]: V(False)

  //   F[p_enable]: 0:0
  prim_subreg #(
      .DW      (1),
      .SWACCESS("RW"),
      .RESVAL  (1'h0)
  ) u_enable_p_enable (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(enable_p_enable_we),
      .wd(enable_p_enable_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.enable.p_enable.q),

      // to register interface (read)
      .qs(enable_p_enable_qs)
  );


  //   F[n_enable]: 1:1
  prim_subreg #(
      .DW      (1),
      .SWACCESS("RW"),
      .RESVAL  (1'h0)
  ) u_enable_n_enable (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(enable_n_enable_we),
      .wd(enable_n_enable_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.enable.n_enable.q),

      // to register interface (read)
      .qs(enable_n_enable_qs)
  );


  // R[adc_p_fine_out]: V(False)

  prim_subreg #(
      .DW      (31),
      .SWACCESS("RW"),
      .RESVAL  (31'h0)
  ) u_adc_p_fine_out (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(adc_p_fine_out_we),
      .wd(adc_p_fine_out_wd),

      // from internal hardware
      .de(hw2reg.adc_p_fine_out.de),
      .d (hw2reg.adc_p_fine_out.d),

      // to internal hardware
      .qe(),
      .q (),

      // to register interface (read)
      .qs(adc_p_fine_out_qs)
  );


  // R[adc_n_fine_out]: V(False)

  prim_subreg #(
      .DW      (31),
      .SWACCESS("RW"),
      .RESVAL  (31'h0)
  ) u_adc_n_fine_out (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(adc_n_fine_out_we),
      .wd(adc_n_fine_out_wd),

      // from internal hardware
      .de(hw2reg.adc_n_fine_out.de),
      .d (hw2reg.adc_n_fine_out.d),

      // to internal hardware
      .qe(),
      .q (),

      // to register interface (read)
      .qs(adc_n_fine_out_qs)
  );


  // R[adc_p_coarse_out]: V(False)

  prim_subreg #(
      .DW      (26),
      .SWACCESS("RW"),
      .RESVAL  (26'h0)
  ) u_adc_p_coarse_out (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(adc_p_coarse_out_we),
      .wd(adc_p_coarse_out_wd),

      // from internal hardware
      .de(hw2reg.adc_p_coarse_out.de),
      .d (hw2reg.adc_p_coarse_out.d),

      // to internal hardware
      .qe(),
      .q (),

      // to register interface (read)
      .qs(adc_p_coarse_out_qs)
  );


  // R[adc_n_coarse_out]: V(False)

  prim_subreg #(
      .DW      (26),
      .SWACCESS("RW"),
      .RESVAL  (26'h0)
  ) u_adc_n_coarse_out (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(adc_n_coarse_out_we),
      .wd(adc_n_coarse_out_wd),

      // from internal hardware
      .de(hw2reg.adc_n_coarse_out.de),
      .d (hw2reg.adc_n_coarse_out.d),

      // to internal hardware
      .qe(),
      .q (),

      // to register interface (read)
      .qs(adc_n_coarse_out_qs)
  );


  // R[vco_decoder_cnt]: V(False)

  prim_subreg #(
      .DW      (32),
      .SWACCESS("RW"),
      .RESVAL  (32'h0)
  ) u_vco_decoder_cnt (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(vco_decoder_cnt_we),
      .wd(vco_decoder_cnt_wd),

      // from internal hardware
      .de(hw2reg.vco_decoder_cnt.de),
      .d (hw2reg.vco_decoder_cnt.d),

      // to internal hardware
      .qe(),
      .q (),

      // to register interface (read)
      .qs(vco_decoder_cnt_qs)
  );


  // R[manual_refresh_train0]: V(False)

  prim_subreg #(
      .DW      (1),
      .SWACCESS("RW"),
      .RESVAL  (1'h0)
  ) u_manual_refresh_train0 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(manual_refresh_train0_we),
      .wd(manual_refresh_train0_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.manual_refresh_train0.q),

      // to register interface (read)
      .qs(manual_refresh_train0_qs)
  );


  // R[manual_refresh_train1]: V(False)

  prim_subreg #(
      .DW      (1),
      .SWACCESS("RW"),
      .RESVAL  (1'h0)
  ) u_manual_refresh_train1 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(manual_refresh_train1_we),
      .wd(manual_refresh_train1_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.manual_refresh_train1.q),

      // to register interface (read)
      .qs(manual_refresh_train1_qs)
  );


  // R[manual_refresh_train2]: V(False)

  prim_subreg #(
      .DW      (1),
      .SWACCESS("RW"),
      .RESVAL  (1'h0)
  ) u_manual_refresh_train2 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(manual_refresh_train2_we),
      .wd(manual_refresh_train2_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.manual_refresh_train2.q),

      // to register interface (read)
      .qs(manual_refresh_train2_qs)
  );




  logic [11:0] addr_hit;
  always_comb begin
    addr_hit = '0;
    addr_hit[0] = (reg_addr == VCO_DECODER_REFRESH_CYCLES_OFFSET);
    addr_hit[1] = (reg_addr == VCO_DECODER_COUNTER_LIMIT_OFFSET);
    addr_hit[2] = (reg_addr == VCO_DECODER_MANUAL_TRIGGER_OFFSET);
    addr_hit[3] = (reg_addr == VCO_DECODER_ENABLE_OFFSET);
    addr_hit[4] = (reg_addr == VCO_DECODER_ADC_P_FINE_OUT_OFFSET);
    addr_hit[5] = (reg_addr == VCO_DECODER_ADC_N_FINE_OUT_OFFSET);
    addr_hit[6] = (reg_addr == VCO_DECODER_ADC_P_COARSE_OUT_OFFSET);
    addr_hit[7] = (reg_addr == VCO_DECODER_ADC_N_COARSE_OUT_OFFSET);
    addr_hit[8] = (reg_addr == VCO_DECODER_VCO_DECODER_CNT_OFFSET);
    addr_hit[9] = (reg_addr == VCO_DECODER_MANUAL_REFRESH_TRAIN0_OFFSET);
    addr_hit[10] = (reg_addr == VCO_DECODER_MANUAL_REFRESH_TRAIN1_OFFSET);
    addr_hit[11] = (reg_addr == VCO_DECODER_MANUAL_REFRESH_TRAIN2_OFFSET);
  end

  assign addrmiss = (reg_re || reg_we) ? ~|addr_hit : 1'b0;

  // Check sub-word write is permitted
  always_comb begin
    wr_err = (reg_we &
              ((addr_hit[ 0] & (|(VCO_DECODER_PERMIT[ 0] & ~reg_be))) |
               (addr_hit[ 1] & (|(VCO_DECODER_PERMIT[ 1] & ~reg_be))) |
               (addr_hit[ 2] & (|(VCO_DECODER_PERMIT[ 2] & ~reg_be))) |
               (addr_hit[ 3] & (|(VCO_DECODER_PERMIT[ 3] & ~reg_be))) |
               (addr_hit[ 4] & (|(VCO_DECODER_PERMIT[ 4] & ~reg_be))) |
               (addr_hit[ 5] & (|(VCO_DECODER_PERMIT[ 5] & ~reg_be))) |
               (addr_hit[ 6] & (|(VCO_DECODER_PERMIT[ 6] & ~reg_be))) |
               (addr_hit[ 7] & (|(VCO_DECODER_PERMIT[ 7] & ~reg_be))) |
               (addr_hit[ 8] & (|(VCO_DECODER_PERMIT[ 8] & ~reg_be))) |
               (addr_hit[ 9] & (|(VCO_DECODER_PERMIT[ 9] & ~reg_be))) |
               (addr_hit[10] & (|(VCO_DECODER_PERMIT[10] & ~reg_be))) |
               (addr_hit[11] & (|(VCO_DECODER_PERMIT[11] & ~reg_be)))));
  end

  assign refresh_cycles_we = addr_hit[0] & reg_we & !reg_error;
  assign refresh_cycles_wd = reg_wdata[31:0];

  assign counter_limit_we = addr_hit[1] & reg_we & !reg_error;
  assign counter_limit_wd = reg_wdata[31:0];

  assign manual_trigger_we = addr_hit[2] & reg_we & !reg_error;
  assign manual_trigger_wd = reg_wdata[0];

  assign enable_p_enable_we = addr_hit[3] & reg_we & !reg_error;
  assign enable_p_enable_wd = reg_wdata[0];

  assign enable_n_enable_we = addr_hit[3] & reg_we & !reg_error;
  assign enable_n_enable_wd = reg_wdata[1];

  assign adc_p_fine_out_we = addr_hit[4] & reg_we & !reg_error;
  assign adc_p_fine_out_wd = reg_wdata[30:0];

  assign adc_n_fine_out_we = addr_hit[5] & reg_we & !reg_error;
  assign adc_n_fine_out_wd = reg_wdata[30:0];

  assign adc_p_coarse_out_we = addr_hit[6] & reg_we & !reg_error;
  assign adc_p_coarse_out_wd = reg_wdata[25:0];

  assign adc_n_coarse_out_we = addr_hit[7] & reg_we & !reg_error;
  assign adc_n_coarse_out_wd = reg_wdata[25:0];

  assign vco_decoder_cnt_we = addr_hit[8] & reg_we & !reg_error;
  assign vco_decoder_cnt_wd = reg_wdata[31:0];

  assign manual_refresh_train0_we = addr_hit[9] & reg_we & !reg_error;
  assign manual_refresh_train0_wd = reg_wdata[0];

  assign manual_refresh_train1_we = addr_hit[10] & reg_we & !reg_error;
  assign manual_refresh_train1_wd = reg_wdata[0];

  assign manual_refresh_train2_we = addr_hit[11] & reg_we & !reg_error;
  assign manual_refresh_train2_wd = reg_wdata[0];

  // Read data return
  always_comb begin
    reg_rdata_next = '0;
    unique case (1'b1)
      addr_hit[0]: begin
        reg_rdata_next[31:0] = refresh_cycles_qs;
      end

      addr_hit[1]: begin
        reg_rdata_next[31:0] = counter_limit_qs;
      end

      addr_hit[2]: begin
        reg_rdata_next[0] = manual_trigger_qs;
      end

      addr_hit[3]: begin
        reg_rdata_next[0] = enable_p_enable_qs;
        reg_rdata_next[1] = enable_n_enable_qs;
      end

      addr_hit[4]: begin
        reg_rdata_next[30:0] = adc_p_fine_out_qs;
      end

      addr_hit[5]: begin
        reg_rdata_next[30:0] = adc_n_fine_out_qs;
      end

      addr_hit[6]: begin
        reg_rdata_next[25:0] = adc_p_coarse_out_qs;
      end

      addr_hit[7]: begin
        reg_rdata_next[25:0] = adc_n_coarse_out_qs;
      end

      addr_hit[8]: begin
        reg_rdata_next[31:0] = vco_decoder_cnt_qs;
      end

      addr_hit[9]: begin
        reg_rdata_next[0] = manual_refresh_train0_qs;
      end

      addr_hit[10]: begin
        reg_rdata_next[0] = manual_refresh_train1_qs;
      end

      addr_hit[11]: begin
        reg_rdata_next[0] = manual_refresh_train2_qs;
      end

      default: begin
        reg_rdata_next = '1;
      end
    endcase
  end

  // Unused signal tieoff

  // wdata / byte enable are not always fully used
  // add a blanket unused statement to handle lint waivers
  logic unused_wdata;
  logic unused_be;
  assign unused_wdata = ^reg_wdata;
  assign unused_be = ^reg_be;

  // Assertions for Register Interface
  `ASSERT(en2addrHit, (reg_we || reg_re) |-> $onehot0(addr_hit))

endmodule

module vco_decoder_reg_top_intf #(
    parameter  int AW = 6,
    localparam int DW = 32
) (
    input logic clk_i,
    input logic rst_ni,
    REG_BUS.in regbus_slave,
    // To HW
    output vco_decoder_reg_pkg::vco_decoder_reg2hw_t reg2hw,  // Write
    input vco_decoder_reg_pkg::vco_decoder_hw2reg_t hw2reg,  // Read
    // Config
    input devmode_i  // If 1, explicit error return for unmapped register access
);
  localparam int unsigned STRB_WIDTH = DW / 8;

  `include "register_interface/typedef.svh"
  `include "register_interface/assign.svh"

  // Define structs for reg_bus
  typedef logic [AW-1:0] addr_t;
  typedef logic [DW-1:0] data_t;
  typedef logic [STRB_WIDTH-1:0] strb_t;
  `REG_BUS_TYPEDEF_ALL(reg_bus, addr_t, data_t, strb_t)

  reg_bus_req_t s_reg_req;
  reg_bus_rsp_t s_reg_rsp;

  // Assign SV interface to structs
  `REG_BUS_ASSIGN_TO_REQ(s_reg_req, regbus_slave)
  `REG_BUS_ASSIGN_FROM_RSP(regbus_slave, s_reg_rsp)



  vco_decoder_reg_top #(
      .reg_req_t(reg_bus_req_t),
      .reg_rsp_t(reg_bus_rsp_t),
      .AW(AW)
  ) i_regs (
      .clk_i,
      .rst_ni,
      .reg_req_i(s_reg_req),
      .reg_rsp_o(s_reg_rsp),
      .reg2hw,  // Write
      .hw2reg,  // Read
      .devmode_i
  );

endmodule


