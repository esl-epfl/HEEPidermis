// Copyright lowRISC contributors.
// Licensed under the Apache License, Version 2.0, see LICENSE for details.
// SPDX-License-Identifier: Apache-2.0
//
// Register Package auto-generated by `reggen` containing data structure

package idac_ctrl_reg_pkg;

  // Address widths within the block
  parameter int BlockAw = 5;

  ////////////////////////////
  // Typedefs for registers //
  ////////////////////////////

  typedef struct packed {logic [31:0] q;} idac_ctrl_reg2hw_refresh_cycles_reg_t;

  typedef struct packed {logic q;} idac_ctrl_reg2hw_manual_trigger_reg_t;

  typedef struct packed {
    struct packed {logic q;} idac1_enable;
    struct packed {logic q;} idac2_enable;
  } idac_ctrl_reg2hw_enable_reg_t;

  typedef struct packed {logic [4:0] q;} idac_ctrl_reg2hw_calibration_1_reg_t;

  typedef struct packed {logic [4:0] q;} idac_ctrl_reg2hw_calibration_2_reg_t;

  typedef struct packed {
    struct packed {logic [7:0] q;} current_1;
    struct packed {logic [7:0] q;} current_2;
  } idac_ctrl_reg2hw_current_reg_t;

  // Register -> HW type
  typedef struct packed {
    idac_ctrl_reg2hw_refresh_cycles_reg_t refresh_cycles;  // [60:29]
    idac_ctrl_reg2hw_manual_trigger_reg_t manual_trigger;  // [28:28]
    idac_ctrl_reg2hw_enable_reg_t enable;  // [27:26]
    idac_ctrl_reg2hw_calibration_1_reg_t calibration_1;  // [25:21]
    idac_ctrl_reg2hw_calibration_2_reg_t calibration_2;  // [20:16]
    idac_ctrl_reg2hw_current_reg_t current;  // [15:0]
  } idac_ctrl_reg2hw_t;

  // Register offsets
  parameter logic [BlockAw-1:0] IDAC_CTRL_REFRESH_CYCLES_OFFSET = 5'h0;
  parameter logic [BlockAw-1:0] IDAC_CTRL_MANUAL_TRIGGER_OFFSET = 5'h4;
  parameter logic [BlockAw-1:0] IDAC_CTRL_ENABLE_OFFSET = 5'h8;
  parameter logic [BlockAw-1:0] IDAC_CTRL_CALIBRATION_1_OFFSET = 5'hc;
  parameter logic [BlockAw-1:0] IDAC_CTRL_CALIBRATION_2_OFFSET = 5'h10;
  parameter logic [BlockAw-1:0] IDAC_CTRL_CURRENT_OFFSET = 5'h14;

  // Register index
  typedef enum int {
    IDAC_CTRL_REFRESH_CYCLES,
    IDAC_CTRL_MANUAL_TRIGGER,
    IDAC_CTRL_ENABLE,
    IDAC_CTRL_CALIBRATION_1,
    IDAC_CTRL_CALIBRATION_2,
    IDAC_CTRL_CURRENT
  } idac_ctrl_id_e;

  // Register width information to check illegal writes
  parameter logic [3:0] IDAC_CTRL_PERMIT[6] = '{
      4'b1111,  // index[0] IDAC_CTRL_REFRESH_CYCLES
      4'b0001,  // index[1] IDAC_CTRL_MANUAL_TRIGGER
      4'b0001,  // index[2] IDAC_CTRL_ENABLE
      4'b0001,  // index[3] IDAC_CTRL_CALIBRATION_1
      4'b0001,  // index[4] IDAC_CTRL_CALIBRATION_2
      4'b0011  // index[5] IDAC_CTRL_CURRENT
  };

endpackage

