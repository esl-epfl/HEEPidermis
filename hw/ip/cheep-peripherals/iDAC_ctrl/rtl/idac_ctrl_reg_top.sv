// Copyright lowRISC contributors.
// Licensed under the Apache License, Version 2.0, see LICENSE for details.
// SPDX-License-Identifier: Apache-2.0
//
// Register Top module auto-generated by `reggen`


`include "common_cells/assertions.svh"

module idac_ctrl_reg_top #(
    parameter type reg_req_t = logic,
    parameter type reg_rsp_t = logic,
    parameter int AW = 5
) (
    input logic clk_i,
    input logic rst_ni,
    input reg_req_t reg_req_i,
    output reg_rsp_t reg_rsp_o,
    // To HW
    output idac_ctrl_reg_pkg::idac_ctrl_reg2hw_t reg2hw,  // Write


    // Config
    input devmode_i  // If 1, explicit error return for unmapped register access
);

  import idac_ctrl_reg_pkg::*;

  localparam int DW = 32;
  localparam int DBW = DW / 8;  // Byte Width

  // register signals
  logic           reg_we;
  logic           reg_re;
  logic [ AW-1:0] reg_addr;
  logic [ DW-1:0] reg_wdata;
  logic [DBW-1:0] reg_be;
  logic [ DW-1:0] reg_rdata;
  logic           reg_error;

  logic addrmiss, wr_err;

  logic [DW-1:0] reg_rdata_next;

  // Below register interface can be changed
  reg_req_t reg_intf_req;
  reg_rsp_t reg_intf_rsp;


  assign reg_intf_req = reg_req_i;
  assign reg_rsp_o = reg_intf_rsp;


  assign reg_we = reg_intf_req.valid & reg_intf_req.write;
  assign reg_re = reg_intf_req.valid & ~reg_intf_req.write;
  assign reg_addr = reg_intf_req.addr;
  assign reg_wdata = reg_intf_req.wdata;
  assign reg_be = reg_intf_req.wstrb;
  assign reg_intf_rsp.rdata = reg_rdata;
  assign reg_intf_rsp.error = reg_error;
  assign reg_intf_rsp.ready = 1'b1;

  assign reg_rdata = reg_rdata_next;
  assign reg_error = (devmode_i & addrmiss) | wr_err;


  // Define SW related signals
  // Format: <reg>_<field>_{wd|we|qs}
  //        or <reg>_{wd|we|qs} if field == 1 or 0
  logic [31:0] refresh_cycles_qs;
  logic [31:0] refresh_cycles_wd;
  logic refresh_cycles_we;
  logic manual_trigger_qs;
  logic manual_trigger_wd;
  logic manual_trigger_we;
  logic enable_idac1_enable_qs;
  logic enable_idac1_enable_wd;
  logic enable_idac1_enable_we;
  logic enable_idac2_enable_qs;
  logic enable_idac2_enable_wd;
  logic enable_idac2_enable_we;
  logic [4:0] calibration_1_qs;
  logic [4:0] calibration_1_wd;
  logic calibration_1_we;
  logic [4:0] calibration_2_qs;
  logic [4:0] calibration_2_wd;
  logic calibration_2_we;
  logic [7:0] current_current_1_qs;
  logic [7:0] current_current_1_wd;
  logic current_current_1_we;
  logic [7:0] current_current_2_qs;
  logic [7:0] current_current_2_wd;
  logic current_current_2_we;

  // Register instances
  // R[refresh_cycles]: V(False)

  prim_subreg #(
      .DW      (32),
      .SWACCESS("RW"),
      .RESVAL  (32'h0)
  ) u_refresh_cycles (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(refresh_cycles_we),
      .wd(refresh_cycles_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.refresh_cycles.q),

      // to register interface (read)
      .qs(refresh_cycles_qs)
  );


  // R[manual_trigger]: V(False)

  prim_subreg #(
      .DW      (1),
      .SWACCESS("RW"),
      .RESVAL  (1'h0)
  ) u_manual_trigger (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(manual_trigger_we),
      .wd(manual_trigger_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.manual_trigger.q),

      // to register interface (read)
      .qs(manual_trigger_qs)
  );


  // R[enable]: V(False)

  //   F[idac1_enable]: 0:0
  prim_subreg #(
      .DW      (1),
      .SWACCESS("RW"),
      .RESVAL  (1'h0)
  ) u_enable_idac1_enable (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(enable_idac1_enable_we),
      .wd(enable_idac1_enable_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.enable.idac1_enable.q),

      // to register interface (read)
      .qs(enable_idac1_enable_qs)
  );


  //   F[idac2_enable]: 1:1
  prim_subreg #(
      .DW      (1),
      .SWACCESS("RW"),
      .RESVAL  (1'h0)
  ) u_enable_idac2_enable (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(enable_idac2_enable_we),
      .wd(enable_idac2_enable_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.enable.idac2_enable.q),

      // to register interface (read)
      .qs(enable_idac2_enable_qs)
  );


  // R[calibration_1]: V(False)

  prim_subreg #(
      .DW      (5),
      .SWACCESS("RW"),
      .RESVAL  (5'h0)
  ) u_calibration_1 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(calibration_1_we),
      .wd(calibration_1_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.calibration_1.q),

      // to register interface (read)
      .qs(calibration_1_qs)
  );


  // R[calibration_2]: V(False)

  prim_subreg #(
      .DW      (5),
      .SWACCESS("RW"),
      .RESVAL  (5'h0)
  ) u_calibration_2 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(calibration_2_we),
      .wd(calibration_2_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.calibration_2.q),

      // to register interface (read)
      .qs(calibration_2_qs)
  );


  // R[current]: V(False)

  //   F[current_1]: 7:0
  prim_subreg #(
      .DW      (8),
      .SWACCESS("RW"),
      .RESVAL  (8'h0)
  ) u_current_current_1 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(current_current_1_we),
      .wd(current_current_1_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.current.current_1.q),

      // to register interface (read)
      .qs(current_current_1_qs)
  );


  //   F[current_2]: 15:8
  prim_subreg #(
      .DW      (8),
      .SWACCESS("RW"),
      .RESVAL  (8'h0)
  ) u_current_current_2 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(current_current_2_we),
      .wd(current_current_2_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.current.current_2.q),

      // to register interface (read)
      .qs(current_current_2_qs)
  );




  logic [5:0] addr_hit;
  always_comb begin
    addr_hit = '0;
    addr_hit[0] = (reg_addr == IDAC_CTRL_REFRESH_CYCLES_OFFSET);
    addr_hit[1] = (reg_addr == IDAC_CTRL_MANUAL_TRIGGER_OFFSET);
    addr_hit[2] = (reg_addr == IDAC_CTRL_ENABLE_OFFSET);
    addr_hit[3] = (reg_addr == IDAC_CTRL_CALIBRATION_1_OFFSET);
    addr_hit[4] = (reg_addr == IDAC_CTRL_CALIBRATION_2_OFFSET);
    addr_hit[5] = (reg_addr == IDAC_CTRL_CURRENT_OFFSET);
  end

  assign addrmiss = (reg_re || reg_we) ? ~|addr_hit : 1'b0;

  // Check sub-word write is permitted
  always_comb begin
    wr_err = (reg_we &
              ((addr_hit[0] & (|(IDAC_CTRL_PERMIT[0] & ~reg_be))) |
               (addr_hit[1] & (|(IDAC_CTRL_PERMIT[1] & ~reg_be))) |
               (addr_hit[2] & (|(IDAC_CTRL_PERMIT[2] & ~reg_be))) |
               (addr_hit[3] & (|(IDAC_CTRL_PERMIT[3] & ~reg_be))) |
               (addr_hit[4] & (|(IDAC_CTRL_PERMIT[4] & ~reg_be))) |
               (addr_hit[5] & (|(IDAC_CTRL_PERMIT[5] & ~reg_be)))));
  end

  assign refresh_cycles_we = addr_hit[0] & reg_we & !reg_error;
  assign refresh_cycles_wd = reg_wdata[31:0];

  assign manual_trigger_we = addr_hit[1] & reg_we & !reg_error;
  assign manual_trigger_wd = reg_wdata[0];

  assign enable_idac1_enable_we = addr_hit[2] & reg_we & !reg_error;
  assign enable_idac1_enable_wd = reg_wdata[0];

  assign enable_idac2_enable_we = addr_hit[2] & reg_we & !reg_error;
  assign enable_idac2_enable_wd = reg_wdata[1];

  assign calibration_1_we = addr_hit[3] & reg_we & !reg_error;
  assign calibration_1_wd = reg_wdata[4:0];

  assign calibration_2_we = addr_hit[4] & reg_we & !reg_error;
  assign calibration_2_wd = reg_wdata[4:0];

  assign current_current_1_we = addr_hit[5] & reg_we & !reg_error;
  assign current_current_1_wd = reg_wdata[7:0];

  assign current_current_2_we = addr_hit[5] & reg_we & !reg_error;
  assign current_current_2_wd = reg_wdata[15:8];

  // Read data return
  always_comb begin
    reg_rdata_next = '0;
    unique case (1'b1)
      addr_hit[0]: begin
        reg_rdata_next[31:0] = refresh_cycles_qs;
      end

      addr_hit[1]: begin
        reg_rdata_next[0] = manual_trigger_qs;
      end

      addr_hit[2]: begin
        reg_rdata_next[0] = enable_idac1_enable_qs;
        reg_rdata_next[1] = enable_idac2_enable_qs;
      end

      addr_hit[3]: begin
        reg_rdata_next[4:0] = calibration_1_qs;
      end

      addr_hit[4]: begin
        reg_rdata_next[4:0] = calibration_2_qs;
      end

      addr_hit[5]: begin
        reg_rdata_next[7:0]  = current_current_1_qs;
        reg_rdata_next[15:8] = current_current_2_qs;
      end

      default: begin
        reg_rdata_next = '1;
      end
    endcase
  end

  // Unused signal tieoff

  // wdata / byte enable are not always fully used
  // add a blanket unused statement to handle lint waivers
  logic unused_wdata;
  logic unused_be;
  assign unused_wdata = ^reg_wdata;
  assign unused_be = ^reg_be;

  // Assertions for Register Interface
  `ASSERT(en2addrHit, (reg_we || reg_re) |-> $onehot0(addr_hit))

endmodule

module idac_ctrl_reg_top_intf #(
    parameter  int AW = 5,
    localparam int DW = 32
) (
    input logic clk_i,
    input logic rst_ni,
    REG_BUS.in regbus_slave,
    // To HW
    output idac_ctrl_reg_pkg::idac_ctrl_reg2hw_t reg2hw,  // Write
    // Config
    input devmode_i  // If 1, explicit error return for unmapped register access
);
  localparam int unsigned STRB_WIDTH = DW / 8;

  `include "register_interface/typedef.svh"
  `include "register_interface/assign.svh"

  // Define structs for reg_bus
  typedef logic [AW-1:0] addr_t;
  typedef logic [DW-1:0] data_t;
  typedef logic [STRB_WIDTH-1:0] strb_t;
  `REG_BUS_TYPEDEF_ALL(reg_bus, addr_t, data_t, strb_t)

  reg_bus_req_t s_reg_req;
  reg_bus_rsp_t s_reg_rsp;

  // Assign SV interface to structs
  `REG_BUS_ASSIGN_TO_REQ(s_reg_req, regbus_slave)
  `REG_BUS_ASSIGN_FROM_RSP(regbus_slave, s_reg_rsp)



  idac_ctrl_reg_top #(
      .reg_req_t(reg_bus_req_t),
      .reg_rsp_t(reg_bus_rsp_t),
      .AW(AW)
  ) i_regs (
      .clk_i,
      .rst_ni,
      .reg_req_i(s_reg_req),
      .reg_rsp_o(s_reg_rsp),
      .reg2hw,  // Write
      .devmode_i
  );

endmodule


