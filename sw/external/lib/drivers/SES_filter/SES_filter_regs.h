// Generated register defines for SES_filter

// Copyright information found in source file:
// Copyright 2025 EPFL contributors

// Licensing information found in source file:
// 
// SPDX-License-Identifier: Apache-2.0 WITH SHL-2.1

#ifndef _SES_FILTER_REG_DEFS_
#define _SES_FILTER_REG_DEFS_

#ifdef __cplusplus
extern "C" {
#endif
// Register width
#define SES_FILTER_PARAM_REG_WIDTH 32

// control register of the SES filter
#define SES_FILTER_SES_CONTROL_REG_OFFSET 0x0
#define SES_FILTER_SES_CONTROL_SES_CONTROL_BIT 0

// status register of the SES filter
#define SES_FILTER_SES_STATUS_REG_OFFSET 0x4
#define SES_FILTER_SES_STATUS_SES_STATUS_MASK 0x3
#define SES_FILTER_SES_STATUS_SES_STATUS_OFFSET 0
#define SES_FILTER_SES_STATUS_SES_STATUS_FIELD \
  ((bitfield_field32_t) { .mask = SES_FILTER_SES_STATUS_SES_STATUS_MASK, .index = SES_FILTER_SES_STATUS_SES_STATUS_OFFSET })

// Size of the window (Ww) of the SES filter
#define SES_FILTER_SES_WINDOW_SIZE_REG_OFFSET 0x8
#define SES_FILTER_SES_WINDOW_SIZE_SES_WINDOW_SIZE_MASK 0x1f
#define SES_FILTER_SES_WINDOW_SIZE_SES_WINDOW_SIZE_OFFSET 0
#define SES_FILTER_SES_WINDOW_SIZE_SES_WINDOW_SIZE_FIELD \
  ((bitfield_field32_t) { .mask = SES_FILTER_SES_WINDOW_SIZE_SES_WINDOW_SIZE_MASK, .index = SES_FILTER_SES_WINDOW_SIZE_SES_WINDOW_SIZE_OFFSET })

// Decimation factor for the downsampling of the SES filter (decim_factor)
#define SES_FILTER_SES_DECIM_FACTOR_REG_OFFSET 0xc
#define SES_FILTER_SES_DECIM_FACTOR_SES_DECIM_FACTOR_MASK 0x3ff
#define SES_FILTER_SES_DECIM_FACTOR_SES_DECIM_FACTOR_OFFSET 0
#define SES_FILTER_SES_DECIM_FACTOR_SES_DECIM_FACTOR_FIELD \
  ((bitfield_field32_t) { .mask = SES_FILTER_SES_DECIM_FACTOR_SES_DECIM_FACTOR_MASK, .index = SES_FILTER_SES_DECIM_FACTOR_SES_DECIM_FACTOR_OFFSET })

// Decimation factor from the system clock to the SES filter clock
#define SES_FILTER_SES_SYSCLK_DIVISION_REG_OFFSET 0x10
#define SES_FILTER_SES_SYSCLK_DIVISION_SES_SYSCLK_DIVISION_MASK 0x3ff
#define SES_FILTER_SES_SYSCLK_DIVISION_SES_SYSCLK_DIVISION_OFFSET 0
#define SES_FILTER_SES_SYSCLK_DIVISION_SES_SYSCLK_DIVISION_FIELD \
  ((bitfield_field32_t) { .mask = SES_FILTER_SES_SYSCLK_DIVISION_SES_SYSCLK_DIVISION_MASK, .index = SES_FILTER_SES_SYSCLK_DIVISION_SES_SYSCLK_DIVISION_OFFSET })

// Thermometric value of the activated stages (The 1s should be contiguous
// and right-aligned)
#define SES_FILTER_SES_ACTIVATED_STAGES_REG_OFFSET 0x14
#define SES_FILTER_SES_ACTIVATED_STAGES_SES_ACTIVATED_STAGES_MASK 0x3f
#define SES_FILTER_SES_ACTIVATED_STAGES_SES_ACTIVATED_STAGES_OFFSET 0
#define SES_FILTER_SES_ACTIVATED_STAGES_SES_ACTIVATED_STAGES_FIELD \
  ((bitfield_field32_t) { .mask = SES_FILTER_SES_ACTIVATED_STAGES_SES_ACTIVATED_STAGES_MASK, .index = SES_FILTER_SES_ACTIVATED_STAGES_SES_ACTIVATED_STAGES_OFFSET })

// Input gain of the different stages (WgX)
#define SES_FILTER_SES_GAIN_STAGE_REG_OFFSET 0x18
#define SES_FILTER_SES_GAIN_STAGE_GAIN_STG_0_MASK 0x1f
#define SES_FILTER_SES_GAIN_STAGE_GAIN_STG_0_OFFSET 0
#define SES_FILTER_SES_GAIN_STAGE_GAIN_STG_0_FIELD \
  ((bitfield_field32_t) { .mask = SES_FILTER_SES_GAIN_STAGE_GAIN_STG_0_MASK, .index = SES_FILTER_SES_GAIN_STAGE_GAIN_STG_0_OFFSET })
#define SES_FILTER_SES_GAIN_STAGE_GAIN_STG_1_MASK 0x1f
#define SES_FILTER_SES_GAIN_STAGE_GAIN_STG_1_OFFSET 5
#define SES_FILTER_SES_GAIN_STAGE_GAIN_STG_1_FIELD \
  ((bitfield_field32_t) { .mask = SES_FILTER_SES_GAIN_STAGE_GAIN_STG_1_MASK, .index = SES_FILTER_SES_GAIN_STAGE_GAIN_STG_1_OFFSET })
#define SES_FILTER_SES_GAIN_STAGE_GAIN_STG_2_MASK 0x1f
#define SES_FILTER_SES_GAIN_STAGE_GAIN_STG_2_OFFSET 10
#define SES_FILTER_SES_GAIN_STAGE_GAIN_STG_2_FIELD \
  ((bitfield_field32_t) { .mask = SES_FILTER_SES_GAIN_STAGE_GAIN_STG_2_MASK, .index = SES_FILTER_SES_GAIN_STAGE_GAIN_STG_2_OFFSET })
#define SES_FILTER_SES_GAIN_STAGE_GAIN_STG_3_MASK 0x1f
#define SES_FILTER_SES_GAIN_STAGE_GAIN_STG_3_OFFSET 15
#define SES_FILTER_SES_GAIN_STAGE_GAIN_STG_3_FIELD \
  ((bitfield_field32_t) { .mask = SES_FILTER_SES_GAIN_STAGE_GAIN_STG_3_MASK, .index = SES_FILTER_SES_GAIN_STAGE_GAIN_STG_3_OFFSET })
#define SES_FILTER_SES_GAIN_STAGE_GAIN_STG_4_MASK 0x1f
#define SES_FILTER_SES_GAIN_STAGE_GAIN_STG_4_OFFSET 20
#define SES_FILTER_SES_GAIN_STAGE_GAIN_STG_4_FIELD \
  ((bitfield_field32_t) { .mask = SES_FILTER_SES_GAIN_STAGE_GAIN_STG_4_MASK, .index = SES_FILTER_SES_GAIN_STAGE_GAIN_STG_4_OFFSET })
#define SES_FILTER_SES_GAIN_STAGE_GAIN_STG_5_MASK 0x1f
#define SES_FILTER_SES_GAIN_STAGE_GAIN_STG_5_OFFSET 25
#define SES_FILTER_SES_GAIN_STAGE_GAIN_STG_5_FIELD \
  ((bitfield_field32_t) { .mask = SES_FILTER_SES_GAIN_STAGE_GAIN_STG_5_MASK, .index = SES_FILTER_SES_GAIN_STAGE_GAIN_STG_5_OFFSET })

// Memory area: Filtered output
#define SES_FILTER_RX_DATA_REG_OFFSET 0x1c
#define SES_FILTER_RX_DATA_SIZE_WORDS 1
#define SES_FILTER_RX_DATA_SIZE_BYTES 4
#ifdef __cplusplus
}  // extern "C"
#endif
#endif  // _SES_FILTER_REG_DEFS_
// End generated register defines for SES_filter